{"version":3,"sources":["webpack:///./node_modules/uuid/dist/esm-browser/rng.js","webpack:///./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack:///./node_modules/uuid/dist/esm-browser/v4.js","webpack:///./src/templates/product-page.js"],"names":["crypto","getRandomValues","bind","msCrypto","Uint8Array","byteToHex","toString","substr","ProductPageTemplate","image","title","heading","description","intro","main","testimonials","fullImage","pricing","className","style","boxShadow","backgroundColor","color","padding","productPageQuery","ProductPage","data","markdownRemark","frontmatter","Layout"],"mappings":"yPAKuC,oBAAVA,QAAyBA,OAAOC,iBAAmBD,OAAOC,gBAAgBC,KAAKF,SAA8B,oBAAZG,UAA8D,mBAA5BA,SAASF,iBAAiCE,SAASF,gBAAgBC,KAAKC,UAC5N,IAAIC,WAAW,ICA3B,IAFA,IAAIC,EAAY,GAEP,EAAI,EAAG,EAAI,MAAO,EACzBA,EAAU,IAAM,EAAI,KAAOC,SAAS,IAAIC,OAAO,GCmBlC,ICjBFC,EAAsB,SAAC,GAAD,EACjCC,MADiC,IAEjCC,EAFiC,EAEjCA,MAFiC,EAGjCC,QAHiC,EAIjCC,YAJiC,EAKjCC,MALiC,EAMjCC,KANiC,EAOjCC,aAPiC,EAQjCC,UARiC,EASjCC,QATiC,OAWjC,yBAAKC,UAAU,WACb,yBACEA,UAAU,2CAEV,wBACEA,UAAU,iCACVC,MAAO,CACLC,UAAW,oCACXC,gBAAiB,OACjBC,MAAO,QACPC,QAAS,SAGVb,IAGL,6BAASQ,UAAU,gCA6BVM,GAFEC,UApBK,SAAC,GAAa,EAAXC,KACQC,eAArBC,YAER,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QAiBuB","file":"component---src-templates-product-page-js-d83caa21ccabad827cdb.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n\n  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');\n}\n\nexport default bytesToUuid;","import rng from './rng.js';\nimport bytesToUuid from './bytesToUuid.js';\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof options == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nexport default v4;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Features from '../components/Features'\nimport Testimonials from '../components/Testimonials'\nimport Pricing from '../components/Pricing'\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\n\nexport const ProductPageTemplate = ({\n  image,\n  title,\n  heading,\n  description,\n  intro,\n  main,\n  testimonials,\n  fullImage,\n  pricing,\n}) => (\n  <div className=\"content\">\n    <div\n      className=\"full-width-image-container margin-top-0\"\n    >\n      <h2\n        className=\"has-text-weight-bold is-size-1\"\n        style={{\n          boxShadow: '0.5rem 0 0 #f40, -0.5rem 0 0 #f40',\n          backgroundColor: '#f40',\n          color: 'white',\n          padding: '1rem',\n        }}\n      >\n        {title}\n      </h2>\n    </div>\n    <section className=\"section section--gradient\">\n\n    </section>\n  </div>\n)\n\n\nconst ProductPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark\n\n  return (\n    <Layout>\n      <ProductPageTemplate\n\n      />\n    </Layout>\n  )\n}\n\nProductPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n}\n\nexport default ProductPage\n\nexport const productPageQuery = graphql`\n  query ProductPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n        }\n    }\n  }\n`\n"],"sourceRoot":""}