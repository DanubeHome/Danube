{"version":3,"file":"cms.358bfb32d41732c2604d.hot-update.js","sources":["webpack:///./src/templates/index-page.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {graphql} from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport Info from \"../components/home/InfoCard\";\nimport AboutComp from \"../components/home/About\";\nimport WhyDanube from \"../components/home/WhyDanube\";\nimport VideoGallery from \"../components/home/VideoGallery\";\nimport MainSlider from \"../components/home/MainSlider\";\nimport Slider from \"../components/home/slider/Slider\";\n\nexport const IndexPageTemplate = ({showVideos,innerWidth, frontmatter, currentSlide, changeSlide}) => (\n    <div>\n        {/*<MainSlider images = {frontmatter.slider}  />*/}\n        <Slider innerWidth={innerWidth} changeSlide={changeSlide} slides={frontmatter.slider}\n                currentSlide={currentSlide}/>\n        <Info info={frontmatter.infoCards}/>\n        <AboutComp data={frontmatter.aboutSection}/>\n        {/*<WhyDanube data={frontmatter.whySection}/>*/}\n        {\n            showVideos && <VideoGallery data={frontmatter.videoSection}/>\n        }\n    </div>\n);\n\nclass IndexPage extends React.Component {\n    timeout;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentSlide: 0, innerWidth: 1,\n            showVideos: false\n\n        };\n    }\n\n    callNext = () => {\n        const {data} = this.props;\n        const {frontmatter} = data.markdownRemark\n        const slides = frontmatter.slider\n        const {currentSlide} = this.state;\n\n        this.setState({currentSlide: currentSlide === slides.length - 1 ? 0 : currentSlide + 1})\n        this.timeout = setTimeout(() => {\n            this.callNext();\n        }, 7000);\n    }\n\n    componentDidMount() {\n        this.timeout = setTimeout(() => {\n            this.callNext();\n        }, 7000);\n        if (typeof window !== 'undefined') {\n            this.setState({innerWidth: window.innerWidth})\n        }\n        setTimeout(() => {\n            this.setState({showVideos: true});\n        }, 1000);\n    }\n\n    changeSlide = (index) => {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.setState({currentSlide: index});\n        this.timeout = setTimeout(() => {\n            this.callNext();\n        }, 7000)\n    };\n\n    render() {\n        const {data} = this.props;\n        const {currentSlide, innerWidth, showVideos} = this.state;\n        const {frontmatter} = data.markdownRemark\n        return <Layout>\n            <IndexPageTemplate\n                changeSlide={this.changeSlide}\n                currentSlide={currentSlide}\n                showVideos={showVideos}\n                innerWidth={innerWidth}\n                frontmatter={frontmatter}\n            />\n        </Layout>\n    }\n}\n\nIndexPage.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.object,\n        }),\n    }),\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        slider {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1380, quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n        }\n        infoCards {\n            image {\n              childImageSharp {\n                fluid(maxWidth: 480, quality: 62) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            overlayTitle\n            content\n            actionTitle\n            actionLink\n        }\n        aboutSection {\n            heading\n            aboutCards {\n                aboutCardTitle\n                aboutCardContent\n            }\n            actionTitle\n            actionLink\n        }\n        whySection {\n            heading\n            whyCards {\n                whyCardIcon\n                title\n            }\n            actionTitle\n            actionLink\n        }\n        videoSection {\n            videos {\n                url\n            }\n            actionTitle\n            actionLink\n        }\n      }\n    }\n  }\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AACA;AAaA;;;AAGA;AAAA;AACA;AAAA;AADA;AACA;AADA;AASA;AAAA;AAGA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAkCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAxCA;AACA;AAAA;AACA;AAFA;AAFA;AAOA;AACA;;;AAaA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;;;;;;;;AA5DA;AACA;AA6DA;AACA;AACA;AACA;AADA;AADA;AADA;AAQA;AAAA;AAEA;;;;;;;;;;AAtFA;AAcA;AAwEA;;;;;;;;;;;;;;A","sourceRoot":""}