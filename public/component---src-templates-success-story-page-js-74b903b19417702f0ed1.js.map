{"version":3,"sources":["webpack:///./src/components/Content.js","webpack:///./src/components/success-story/ImagePopup.js","webpack:///./src/components/success-story/SuccessCards.js","webpack:///./src/templates/success-story-page.js"],"names":["HTMLContent","content","className","dangerouslySetInnerHTML","__html","Content","ImagePopup","props","render","this","popupOpen","onClick","togglePopup","src","staticData","alt","React","Component","SuccessCards","index","setState","state","data","heading","successCards","map","item","style","backgroundSize","bacgroundPosition","backgroundImage","mediaImage","childImageSharp","fluid","opacity","text","SuccessStoryPageTemplate","frontmatter","successStoryPageQuery","SuccessStoryPage","markdownRemark","Layout"],"mappings":"4FAAA,2DAGaA,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACzB,yBAAKA,UAAWA,EAAWC,wBAAyB,CAAEC,OAAQH,MAcjDI,IAXC,SAAC,GAAD,IAAGJ,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OACd,yBAAKA,UAAWA,GAAYD,K,qNCsBfK,EA5BC,YACZ,WAAYC,GAAQ,OAChB,YAAMA,IADS,KADP,oCAQZC,OAAA,WAAU,IAAD,OACL,OACI,6BAASN,UAAW,mBAAqBO,KAAKF,MAAMG,UAAY,OAAQ,KACpE,yBAAKR,UAAU,yCACX,yBAAKA,UAAU,YAAYS,QAAS,kBAAM,EAAKJ,MAAMK,aAAa,KAAlE,KACA,yBAAKV,UAAU,cACX,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKW,IAAKJ,KAAKF,MAAMO,WAAYC,IAAI,iBAjBzD,GAAiBC,IAAMC,WCgExBC,EA/DG,YACd,WAAYX,GAAQ,IAAD,SACf,cAAMA,IAAN,MAMJK,YAAc,SAACO,GACX,EAAKC,SAAS,CAACV,UAAWS,KAN1B,EAAKE,MAAQ,CACTX,WAAY,GAHD,EADL,oCAYdF,OAAA,WAAU,IAAD,OACEc,EAAQb,KAAKF,MAAbe,KACP,OAAKA,EAKD,6BAASpB,UAAU,8BACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,wBAAwBoB,EAAKC,WAIpD,yBAAKrB,UAAU,OAEPoB,EAAKE,aAAaC,KAAI,SAACC,EAAMP,GACzB,OACI,yBAAKjB,UAAU,YACX,yBAAKA,UAAU,sCACVS,QAAS,kBAAM,EAAKC,YAAYO,KACjC,yBAAKjB,UAAU,oBAAoByB,MAAO,CACtCC,eAAgB,QAChBC,kBAAmB,SACnBC,gBAAgB,QACVJ,EAAKK,WAAWC,gBAAkBN,EAAKK,WAAWC,gBAAgBC,MAAMpB,IAAMa,EAAKK,YAD1E,MAIf,yBAAKJ,MAAO,CAACO,QAAS,GACjBrB,IAAOa,EAAKK,WAAWC,gBAAkBN,EAAKK,WAAWC,gBAAgBC,MAAMpB,IAAMa,EAAKK,WAC1FhB,IAAI,QAAQb,UAAU,eAE/B,yBAAKA,UAAU,0BACVwB,EAAKS,OAGd,kBAAC,EAAD,CAAYrB,WAAYY,EAAKK,WAAWC,gBAAgBC,MAAMpB,IAClDH,UAAW,EAAKW,MAAMX,YAAcS,EAAOP,YAAa,EAAKA,qBAnC9F,sCAfD,GAAiBI,IAAMC,WCI5BmB,EAA2B,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YACtC,OACI,yBAAKnC,UAAU,sBACX,kBAAC,EAAD,CAAcoB,KAAQe,MA4BrBC,GAFEC,UAfU,SAAC,GAAc,IAC5BF,EAD2B,EAAXf,KACKkB,eAArBH,YACR,OACI,kBAACI,EAAA,EAAD,KACI,kBAAC,EAAD,CACIJ,YAAeA,MAYG","file":"component---src-templates-success-story-page-js-74b903b19417702f0ed1.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n","import React from 'react'\n\nconst ImagePopup = class extends React.Component {\n    constructor(props) {\n        super(props)\n        /*this.state = {\n            popupOpen: false\n        }*/\n    }\n\n    render() {\n        return (\n            <section className={'popup-backdrop ' + (this.props.popupOpen ? 'open': '')}>\n                <div className=\"image-popup-container popup-container\">\n                    <div className=\"close-btn\" onClick={() => this.props.togglePopup(-1)}>&times;</div>\n                    <div className=\"popup-body\">\n                        <div className=\"container-fluid text-center\">\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <img src={this.props.staticData} alt=\"image\"/>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default ImagePopup\n","import React from 'react'\nimport ImagePopup from \"./ImagePopup\";\n\nconst SuccessCards = class extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            popupOpen: -1\n        }\n    }\n\n    togglePopup = (index) => {\n        this.setState({popupOpen: index});\n    }\n\n    render() {\n        const {data} = this.props;\n        if (!data) {\n            return <></>;\n        }\n\n        return (\n            <section className=\"success-cards-section py-5\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col text-center\">\n                            <div className=\"section-heading mb-5\">{data.heading}</div>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        {\n                            data.successCards.map((item, index) => {\n                                return (\n                                    <div className=\"col-md-6\">\n                                        <div className=\"success-story-box position-relative\"\n                                             onClick={() => this.togglePopup(index)}>\n                                            <div className=\"catalogue-box-img\" style={{\n                                                backgroundSize: 'cover',\n                                                bacgroundPosition: 'center',\n                                                backgroundImage: `url(${\n                                                    !!item.mediaImage.childImageSharp ? item.mediaImage.childImageSharp.fluid.src : item.mediaImage\n                                                })`,\n                                            }}>\n                                                <img style={{opacity: 0}}\n                                                     src={!!item.mediaImage.childImageSharp ? item.mediaImage.childImageSharp.fluid.src : item.mediaImage}\n                                                     alt=\"image\" className=\"img-fluid\"/>\n                                            </div>\n                                            <div className=\"success-story-box-info\">\n                                                {item.text}\n                                            </div>\n                                        </div>\n                                        <ImagePopup staticData={item.mediaImage.childImageSharp.fluid.src}\n                                                    popupOpen={this.state.popupOpen === index} togglePopup={this.togglePopup}/>\n                                    </div>\n                                )\n                            })\n                        }\n\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default SuccessCards\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Content, { HTMLContent } from '../components/Content'\nimport SuccessCards from \"../components/success-story/SuccessCards\";\n\nexport const SuccessStoryPageTemplate = ({frontmatter}) => {\n    return (\n        <div className=\"success-story-page\">\n            <SuccessCards data = {frontmatter} />\n        </div>\n    )\n}\n\n/*SuccessStoryPageTemplate.propTypes = {\n    title: PropTypes.string.isRequired,\n    content: PropTypes.string,\n    contentComponent: PropTypes.func,\n}*/\n\nconst SuccessStoryPage = ({ data }) => {\n    const { frontmatter } = data.markdownRemark\n    return (\n        <Layout>\n            <SuccessStoryPageTemplate\n                frontmatter = {frontmatter}\n            />\n        </Layout>\n    )\n}\n\nSuccessStoryPage.propTypes = {\n    data: PropTypes.object.isRequired,\n}\n\nexport default SuccessStoryPage\n\nexport const successStoryPageQuery = graphql`\n  query SuccessStoryPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        title\n        heading\n        successCards {\n            mediaImage {\n                childImageSharp {\n                    fluid(maxWidth: 580, quality: 72) {\n                      ...GatsbyImageSharpFluid\n                    }\n                }\n            }\n            text\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}